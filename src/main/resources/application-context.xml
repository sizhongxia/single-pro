<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/data/elasticsearch
       http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd ">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/mysql.properties</value>
				<value>classpath:/redis.properties</value>
			</list>
		</property>
	</bean>

	<bean id="cacheUtil" class="com.single.pro.cache.CacheUtil" destroy-method="destroy"></bean>
	<bean id="baseDataCacheUtil" class="com.single.pro.cache.BaseDataCacheUtil"></bean>

	<bean id="scheduler" lazy-init="false" scope="singleton" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />
	<!-- 任务管理器 -->
	<bean class="com.single.pro.quartz.JobManager">
		<property name="scheduler" ref="scheduler"></property>
	</bean>

	<!--扫描包进行注入 -->
	<context:component-scan base-package="com.single.pro.mapper" />
	<context:component-scan base-package="com.single.pro.service.impl" />
	<!-- 作业任务包 -->
	<context:component-scan base-package="com.single.pro.quartz.job" />
	
	<bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		 <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="validationQueryTimeout" value="${druid.validationQueryTimeout}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <property name="logAbandoned" value="${druid.logAbandoned}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 oracle=true mysql=false -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
   		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="${druid.filters}" />
	</bean>

	<!-- 数据库连接池管理 -->
	<bean id="masterDb" parent="baseDataSource">
		<property name="driverClassName" value="${db.master.driverClass}"></property>
		<property name="url" value="${db.master.jdbcUrl}"></property>
		<property name="username" value="${db.master.user}"></property>
		<property name="password" value="${db.master.password}"></property>
	</bean>
	<bean id="slaveDb" parent="baseDataSource">
		<property name="driverClassName" value="${db.slave.driverClass}"></property>
		<property name="url" value="${db.slave.jdbcUrl}"></property>
		<property name="username" value="${db.slave.user}"></property>
		<property name="password" value="${db.slave.password}"></property>
	</bean>

	<bean id="manyDataSource" class="com.single.pro.holder.CustomerRoutingDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="master" value-ref="masterDb" />
				<entry key="slave" value-ref="slaveDb" />
			</map>
		</property>
		<!-- 默认数据源 -->
		<property name="defaultTargetDataSource" ref="masterDb" />
	</bean>

	<bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
		<property name="idType" value="1" />
		<property name="dbType" value="mysql" />
		<!-- 全局表为下划线命名设置 true -->
		<property name="dbColumnUnderline" value="true" />
	</bean>

	<bean id="sqlSessionFactory"
		class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="manyDataSource" />
		<property name="mapperLocations" value="classpath*:mybatis/*Mapper.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="typeAliasesPackage" value="com.single.pro.entity" />
		<property name="plugins">
			<array>
				<!-- 分页插件配置 -->
				<bean id="paginationInterceptor"
					class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
					<property name="dialectType" value="mysql" />
				</bean>
				<bean class="com.baomidou.mybatisplus.plugins.OptimisticLockerInterceptor" />
			</array>
		</property>
		<!-- 全局配置注入 -->
		<property name="globalConfig" ref="globalConfig" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- 配置扫描Mapper接口的包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.single.pro.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- ================================事务相关控制================================================= -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="manyDataSource"></property>
	</bean>

	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- PROPAGATION_REQUIRED: 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。 -->
			<tx:method name="del*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!--把事务控制在Service层 -->
		<aop:pointcut id="pc" expression="execution(public * com.single.pro.service.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>

	<bean id="manyDataSourceAspect" class="com.single.pro.holder.ManyDataSourceAspect" />
	<aop:config>
		<aop:aspect id="cds" ref="manyDataSourceAspect">
			<aop:pointcut id="tx" expression="execution(public * com.single.pro.service.*.*(..))" />
			<aop:before pointcut-ref="tx" method="switchDB" />
		</aop:aspect>
	</aop:config>

</beans>